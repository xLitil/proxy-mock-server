version: 2 # use CircleCI 2.0
jobs: # a collection of steps
  build: # runs not using Workflows must have a `build` job as entry point

    docker:
      - image: 3.5.3-jdk-8
        environment:
          - cmd=/bin/bash

    steps: # a collection of executable commands

      - checkout # check out source code to working directory

      - restore_cache: # restore the saved cache after the first run or if `pom.xml` has changed
          key: circleci-proxy-mock-server-cache-{{ checksum "pom.xml" }}

      - run: mvn dependency:go-offline # gets the project dependencies

      - save_cache: # saves the project dependencies
          paths:
            - ~/.m2
          key: circleci-proxy-mock-server-{{ checksum "pom.xml" }}

      - run: mvn -s .circleci/settings.xml package

      - run:
          name: Save test results
          command: |
            mkdir -p ~/junit/
            find . -type f -regex ".*/target/surefire-reports/.*xml" -exec cp {} ~/junit/ \;
          when: always
      - store_test_results:
          path: ~/junit
      - store_artifacts:
          path: ~/junit

      - store_artifacts:
          path: target/*.jar
      # See https://circleci.com/docs/2.0/deployment-integrations/ for deploy examples

      - save_cache: # saves the project dependencies
          paths:
            - target
          key: cache-target

  deploy: # runs not using Workflows must have a `build` job as entry point

    docker: # run the steps with Docker
      - image: circleci/openjdk:8-jdk-browsers # ...with this image as the primary container; this is where all `steps` will run

    steps: # a collection of executable commands

      - checkout # check out source code to working directory

      - restore_cache: # restore the saved cache after the first run or if `pom.xml` has changed
          key: cache-target

      - run: mvn -s .circleci/settings.xml deploy

workflows:
  version: 2
  build-and-deploy:
    jobs:
      - build
      - hold:
          type: approval
          requires:
            - build
      - deploy:
          requires:
            - hold
